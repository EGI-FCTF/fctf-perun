#!/bin/bash
NAME='perunv3'
SCRIPTS_DIR=`dirname $0`
LOCK_DIR="${SCRIPTS_DIR}/var/lock"
SERVICE_BLACKLIST=()  # syntax: (item1 item2 item3)
SERVICE_WHITELIST=('opennebula_fedcloud')

# Temporarily set umask to 077 in order to have all temp configuration files private
umask 077

### Status codes
I_FINISHED=(0 'Service ${SERVICE} processing done')
I_PROTOCOL_MINOR_DIFF=(0 'Difference in protocol minor version')
I_SERVICE_DISABLED=(0 'Service ${SERVICE} is disabled')

E_WORK_DIR=(1 'Problem with working directory')
E_TAR_FILES=(2 'Problem with extracting received files')
E_LOCK_FILE=(3 'Lock file already exists')
E_DIFF_UPDATE=(4 'Diff between old and new file failed')
E_IO=(4 'IO operation failed')
E_PROTOCOL_VERSION=(200 'Wrong version of received files - (local=${PROTOCOL_VERSION},remote=${RECEIVED_PROTOCOL_VERSION})')
E_PROTOCOL_VERSION_FILE=(201 'Remote protocol version file missing')
E_PROTOCOL_VERSION_VARIABLE=(202 'PROTOCOL_VERSION variable not set')
E_UNSUPPORTED_SERVICE=(203 'Unsupported service')
E_MOVE_ERROR=(205 'Could not move ${SRC} to ${DST}')
E_PERL_UNIQUE=(206 'Perl uniq program failed')
E_NEW_TO_OLD=(207 'Critical error! File with old state can not t be replaced with new one. Do this manually or the service will be in incosistent state! Files: OLD=${OLD} NEW=${NEW}')
E_NEW_FILE=(208 'New file (to diff_update) does not exists or it is not readable')
E_DESTINATION_FILE=(209 'Destination file (to diff_update) does not exists or do not have right persmissions')
E_PERMISSIONS=(210 'Cannot set permissions')

### Functions
function log_msg {
  CODE=`eval echo '${'$1'[0]}'`
  TEXT=`eval echo '${'$1'[1]}'`
  TEXT=`eval echo \"${TEXT}\"`  # expand variables in message
  CODE=${CODE:=255}
  TEXT=${TEXT:=Unknown error $1}

  if [ "${CODE}" -eq 0 ]; then
    MSG="Info: ${TEXT}"
    echo "${MSG}"
    logger -t "${NAME}" -p daemon.info "${MSG}" &>/dev/null
  else
    MSG="Error $1 (code=${CODE}): ${TEXT}"
    echo "${MSG}" >&2
    logger -t "${NAME}" -p daemon.error "${MSG}" &>/dev/null
    exit "${CODE}"
  fi 
}

function catch_error {
  ERROR_NAME="$1"
  shift

  "$@" || log_msg ${ERROR_NAME}
}

function create_lock {
  catch_error E_LOCK_FILE mkdir "${LOCK_FILE}"
  trap 'rm -r -f "${WORK_DIR}" "${LOCK_FILE}"' EXIT
}

function version_check {
  SERVICE_VERSION_FILE="${WORK_DIR}/VERSION"
  [ -n "${PROTOCOL_VERSION}" ] || log_msg E_PROTOCOL_VERSION_VARIABLE
  [ -r "$SERVICE_VERSION_FILE" ] || log_msg E_PROTOCOL_VERSION_FILE
  RECEIVED_PROTOCOL_VERSION=`head -n 1 "$SERVICE_VERSION_FILE"`
  [ "${RECEIVED_PROTOCOL_VERSION%.*}" = "${PROTOCOL_VERSION%.*}" ] || log_msg E_PROTOCOL_VERSION
  [ ${RECEIVED_PROTOCOL_VERSION} = ${PROTOCOL_VERSION} ] || log_msg I_PROTOCOL_MINOR_DIFF
}

function in_array {
  ITEM=$1
  shift

  for ELEMENT in "$@"; do
    [ "x${ITEM}" == "x${ELEMENT}" ] && return 0
  done

  return 1
}

#################################################

WORK_DIR=`mktemp -d ${TMPDIR:-/tmp}/${NAME}.XXXXXXXXXX`
[ $? -ne 0 ] && log_msg E_WORK_DIR
trap 'rm -r -f "${WORK_DIR}"' EXIT

### Receive and process data
catch_error E_TAR_FILES tar --no-same-owner --no-same-permissions -x -C "${WORK_DIR}" <&0
SERVICE=`head -n 1 "${WORK_DIR}/SERVICE"`
LOCK_FILE="${LOCK_DIR}/${NAME}-${SERVICE}.lock"

# check if the service is not disabled
if [ "${#SERVICE_WHITELIST[@]}" -gt 0  ]; then
  if in_array "${SERVICE}" "${SERVICE_WHITELIST[@]}"; then
    true
  else
    log_msg I_SERVICE_DISABLED
    exit 0;
  fi
fi

if [ "${#SERVICE_BLACKLIST[@]}" -gt 0  ]; then
  if in_array "${SERVICE}" "${SERVICE_BLACKLIST[@]}"; then
    log_msg I_SERVICE_DISABLED
    exit 0;
  fi
fi

case "${SERVICE}" in
  'opennebula_fedcloud')   . ${SCRIPTS_DIR}/process-opennebula_fedcloud.sh ;;
  *)                       log_msg E_UNSUPPORTED_SERVICE;;
esac

version_check        #check the received version with version from slave script

for F in `ls "${SCRIPTS_DIR}/${SERVICE}.d"/pre_* 2>/dev/null` ;do . $F ; done
process              #execute slave skript (e.g. runs function process in process-passwd.sh script)
for F in `ls "${SCRIPTS_DIR}/${SERVICE}.d"/post_* 2>/dev/null` ;do . $F ; done

log_msg I_FINISHED
